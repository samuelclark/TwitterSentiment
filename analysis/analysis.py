import pattern.vector as patvec

class InstagramAnalysis:
    def __init__(self, tag_recent_media):
        self.media_index
        self.text = self.get_text()
        self.document = self.get_document()

    def generate_keywords(self, top=10):
        """
            keywords generated by pattern.vector.Document
            returns keywords[:top]
        """
        return self.document.keywords(top=top)

    def get_text(self):
        """
            Joins caption and all comments from each media object and adds to list
            returns list of text
        """
        text = []
        for id, instagram_media in self.media_index.iteritems():
            caption_text = instagram_media['caption']
            comment_text = " ".join(comment['comment_text'] for comment in instagram_media['comments'])
            text.append(caption_text + comment_text)
        return text

    def get_document(self):
        """
            initializes a pattern.vector.Document
            with self.text and returns that Document instance
        """
        return patvec.Document(" ".join(self.text))


    def tag_rank(self):
        """
            Computes frequency distribution for tags and returns that frequency distribution
        """
        tags = {}
        for key, instagram_media in self.media_index.iteritems():
            for tag in instagram_media['tags']:
                tags[tag.name] = tags.get(tag, 0) + 1

        return tags

    def like_rank(self):
        return sorted(self.media_index, key=lambda x: self.media_index[x]['like_count'], reverse=True)

    def time_rank(self):
        return sorted(self.media_index, key=lambda x: self.media_index[x]['date'])

    def rank_by_value(info):
        """
            Ranks dictionary by value and returns those keys
        """
        return sorted(info, key=lambda x: info[x], reverse=True)
